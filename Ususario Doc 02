Usuario TaxiTip_App

src\
    assets\icons
    components\
        common\
            Header.js (vacÃ­o)
            InputField.js (vacÃ­o)
            UserFooter.js

                Define el footer de la app con botones para Home, ConfiguraciÃ³n y una acciÃ³n central.

                ðŸ”¹ CÃ³mo funciona:

                Usa styled-components para el diseÃ±o.
                Maneja la navegaciÃ³n con useNavigation().
                Incluye iconos de Ionicons para cada botÃ³nâ€‹

        user\
            UserCard.js

                Muestra detalles del viaje confirmado, incluyendo ticket, conductor, telÃ©fono y tarifa estimada.

                ðŸ”¹ CÃ³mo funciona:

                Usa tripDetails para mostrar informaciÃ³n del viaje.
                Incluye botones para cancelar o buscar un taxi.
                Ocupa 1/4 de la pantalla, dejando 3/4 para el mapaâ€‹

        contexts\
            AuthContext.js

                Gestiona la autenticaciÃ³n del usuario en la aplicaciÃ³n.

                ðŸ”¹ CÃ³mo funciona:

                Usa onAuthStateChanged para detectar cambios en la sesiÃ³n.
                Almacena el usuario autenticado en currentUser.
                Proporciona acceso a la sesiÃ³n en toda la app con useAuth()

            TripContext.js

                Este archivo maneja el estado global del viaje en la aplicaciÃ³n, obteniendo y actualizando datos en tiempo real desde Firestore.

                ðŸ”¹ Â¿CÃ³mo funciona?

                Al iniciar, obtiene la informaciÃ³n del viaje actual desde la base de datos.
                Se suscribe a cambios en Firestore para actualizar automÃ¡ticamente los datos del viaje.
                Proporciona tripData y su estado (loading) a los componentes que lo necesiten.
                ðŸ”¹ Â¿Para quÃ© se usa?

                Para mostrar en vivo el estado del viaje (ruta, tarifa, distancia).
                Para sincronizar en tiempo real la ubicaciÃ³n del conductor y el usuario

            UserContext.js

                Maneja el estado global del usuario en la aplicaciÃ³n.

                ðŸ”¹ CÃ³mo funciona:

                Usa useState para almacenar la informaciÃ³n del usuario.
                Proporciona setUser para actualizar los datos.
                Permite acceder al usuario desde cualquier componente con 

        elements\

            Alerts\

               Alertas.js 

                Muestra alertas animadas en la app con distintos tipos (Ã©xito, error, advertencia), usando react-native-reanimated y styled-components.

                ðŸ”¹ CÃ³mo funciona:

                Usa animaciones para mostrar y ocultar la alerta.
                Cambia el color segÃºn el tipo de alerta.
                Se oculta automÃ¡ticamente despuÃ©s de 3 segundos o al presionar el botÃ³n de cierreâ€‹

            Buttons\

                Button.js   
                
                Define un botÃ³n personalizable con colores, iconos y estados (loading, disabled).

                ðŸ”¹ CÃ³mo funciona:

                Usa styled-components para estilos dinÃ¡micos.
                Cambia el color segÃºn el tipo (success, danger, warning, primary).
                Muestra un ActivityIndicator si estÃ¡ en estado de carga (loading).
                Incluye un icono opcional con MaterialIconsâ€‹

                buttonAcceptTrip.js 

                buttonBuildCards.js

                Guarda la ubicaciÃ³n del usuario en Firestore y lo redirige a UserConfirmationScreen.

                ðŸ”¹ CÃ³mo funciona:

                Verifica que el usuario estÃ© autenticado.
                Obtiene la ubicaciÃ³n actual y la guarda en userCards.
                Muestra alertas en caso de error.
                Navega a UserConfirmationScreen con los datos guardadosâ€‹

                buttonCancelCards.js 

                BotÃ³n para cancelar solicitudes de viaje.

                ðŸ”¹ CÃ³mo funciona:

                Usa useCancelRequest() para manejar la cancelaciÃ³n.
                Muestra un indicador de carga (ActivityIndicator) mientras procesa.
                Deshabilita el botÃ³n si la solicitud estÃ¡ en curso

            firebase\

                service\

                    auth.js

                    Maneja el registro e inicio de sesiÃ³n de usuarios con Firebase Auth.

                    ðŸ”¹ CÃ³mo funciona:

                    Registra usuarios con createUserWithEmailAndPassword().
                    Guarda datos adicionales en Firestore.
                    Maneja errores comunes como correo en uso o permisos insuficientesâ€‹

                firebaseConfig.js

                Configura e inicializa Firebase en la app.

                ðŸ”¹ CÃ³mo funciona:

                Usa variables de entorno para mayor seguridad.
                Inicializa Firebase App, Auth con persistencia y Firestore.
                Evita mÃºltiples inicializaciones con global.firebaseApp

            hooks\

                useCancelRequest.js

                Cancela solicitudes de viaje eliminÃ¡ndolas de Firestore.

                ðŸ”¹ CÃ³mo funciona:

                Verifica si el usuario estÃ¡ autenticado.
                Comprueba si la solicitud existe y si el usuario tiene permiso.
                Elimina el documento en userCards.
                Redirige a UserHomeScreen tras cancelar

                useTripProgress.js

                FunciÃ³n del archivo useTripProgress.js
                Monitorea el estado del viaje en tiempo real desde Firestore.

                ðŸ”¹ CÃ³mo funciona:

                Obtiene los datos iniciales del viaje.
                Se suscribe a Firestore para actualizaciones en tiempo real.
                Redirige al usuario si el viaje finaliza o no existe                

            navigation\

                AuthNavigator.js

                Maneja la navegaciÃ³n para la autenticaciÃ³n de usuarios.

                ðŸ”¹ CÃ³mo funciona:

                Usa createStackNavigator para gestionar la pantalla de autenticaciÃ³n.
                Pasa el parÃ¡metro role para diferenciar entre usuario y conductor.
                Oculta el encabezado en la navegaciÃ³n

                RootStack.js

                Maneja la navegaciÃ³n principal de la app.

                ðŸ”¹ CÃ³mo funciona:

                Define el flujo inicial con WelcomeScreen.
                Incluye las rutas de autenticaciÃ³n (AuthNavigator) y usuario (UserNavigator).
                Usa createStackNavigator sin mostrar encabezadosâ€‹                

                UserNavigator.js

                Maneja la navegaciÃ³n entre las pantallas del usuario.

                ðŸ”¹ CÃ³mo funciona:

                Usa createStackNavigator para definir el flujo de usuario.
                Incluye pantallas como Home, GeolocalizaciÃ³n, ConfirmaciÃ³n, Progreso del viaje y Mapa.
                Oculta los encabezados de la navegaciÃ³nâ€‹

            screens\

                auth\

                   AuthScreen.js

                    Maneja el inicio de sesiÃ³n y registro de usuarios.

                    ðŸ”¹ CÃ³mo funciona:

                    Usa Firebase Auth para autenticaciÃ³n.
                    Guarda datos adicionales en Firestore al registrar un usuario.
                    Muestra alertas y valida errores en el procesoâ€‹

                   WelcomeScreen.js 

                    Muestra la pantalla de bienvenida y permite elegir el rol de usuario.

                    ðŸ”¹ CÃ³mo funciona:

                    Muestra un mensaje de bienvenida e imagen.
                    Permite seleccionar el rol (usuario).
                    Navega a AuthNavigator con el rol seleccionadoâ€‹WelcomeScreen

                user\

                    UserConfirmationScreen.js

                    Muestra el estado y progreso del viaje del usuario.

                    ðŸ”¹ CÃ³mo funciona:

                    Usa useTripProgress para obtener datos del viaje.
                    Muestra la ubicaciÃ³n de origen, destino y estado del viaje.
                    Indica si la informaciÃ³n aÃºn no estÃ¡ disponible

                    UserGeoLocationScreen.js

                    Muestra la ubicaciÃ³n del usuario en un mapa y permite confirmar o editar la direcciÃ³n.

                    ðŸ”¹ CÃ³mo funciona:

                    Obtiene la ubicaciÃ³n actual con expo-location.
                    Usa react-native-maps para mostrar el mapa y un marcador.
                    Permite ingresar manualmente la direcciÃ³n y guardarla con ButtonBuildCardsâ€‹

                    UserHomeScreen.js

                    Muestra la pantalla de inicio del usuario y permite buscar un taxi.

                    ðŸ”¹ CÃ³mo funciona:

                    Obtiene el nombre del usuario desde Firestore.
                    Muestra un botÃ³n para buscar un taxi.
                    Simula un tiempo de espera antes de navegar a UserGeoLocationScreenâ€‹UserHomeScreen.

                    UserMapViewScreen.js

                    Muestra la ubicaciÃ³n del usuario y del conductor en el mapa.

                    ðŸ”¹ CÃ³mo funciona:

                    Obtiene los datos del viaje en tiempo real desde Firestore.
                    Muestra el origen, destino y telÃ©fono del conductor.
                    Permite llamar al conductor desde la app

                    UserTripProgressScreen.js

                    ðŸ“Œ FunciÃ³n del archivo UserTripProgressScreen.js
                    Muestra el progreso del viaje en un mapa en tiempo real.

                    ðŸ”¹ CÃ³mo funciona:

                    Usa TripContext para obtener los datos del viaje.
                    Muestra la ubicaciÃ³n del conductor en un MapView.
                    Indica si el conductor aÃºn no tiene ubicaciÃ³n disponibleâ€‹

                services\ (vacÃ­o)
                styles\

                    globalStyles.js

                    Define estilos globales reutilizables en la app.

                    ðŸ”¹ CÃ³mo funciona:

                    Usa StyleSheet.create() para definir estilos comunes.
                    Incluye configuraciones para contenedores, textos, botones y errores.
                    Utiliza el archivo theme.js para colores y espaciadoâ€‹

                    theme.js

                    Define la paleta de colores y tipografÃ­as globales de la app.

                    ðŸ”¹ CÃ³mo funciona:

                    Contiene colores para fondos, textos y botones.
                    Especifica fuentes regular y bold.
                    Se usa en los estilos globales y componentesâ€‹

                utils\

                    validators.js

                    Valida correos electrÃ³nicos y contraseÃ±as.

                    ðŸ”¹ CÃ³mo funciona:

                    validateEmail(): Verifica que el formato del email sea vÃ¡lido.
                    validatePassword(): Requiere al menos 8 caracteres, una mayÃºscula, un nÃºmero y un sÃ­mbolo

App.js

Inicializa la aplicaciÃ³n y gestiona la autenticaciÃ³n.

ðŸ”¹ CÃ³mo funciona:

Usa auth.onAuthStateChanged() para detectar usuarios activos.
Proporciona los contextos UserProvider y DriverProvider.
Maneja la navegaciÃ³n con NavigationContainer y RootStack

app.json

Configura Expo para la app.

ðŸ”¹ CÃ³mo funciona:

Define el nombre, iconos y pantalla de inicio.
Configura la orientaciÃ³n y el estilo de la interfaz.
Especifica opciones para iOS, Android y webâ€‹

babel.config.js

Configura Babel para la app de React Native.

ðŸ”¹ CÃ³mo funciona:

Usa babel-preset-expo para Expo.
Habilita @babel/preset-react con runtime: "automatic".
Carga variables de entorno desde .env.
Soporta react-native-reanimated

index.js

Registra la aplicaciÃ³n principal en Expo.

ðŸ”¹ CÃ³mo funciona:

Importa y ejecuta registerRootComponent(App).
Asegura la correcta inicializaciÃ³n en Expo Go o una compilaciÃ³n nativaâ€‹index

package-lock.json

Mantiene un registro exacto de las versiones de las dependencias instaladas.

ðŸ”¹ CÃ³mo funciona:

Asegura que todos los entornos usen las mismas versiones de paquetes.
Guarda las URL de descarga y los hash de integridad de cada dependencia.
Se genera automÃ¡ticamente al instalar paquetes con npm install

package.json

Define las dependencias, scripts y configuraciÃ³n de la app.

ðŸ”¹ CÃ³mo funciona:

Especifica el nombre, versiÃ³n y punto de entrada (index.js).
Contiene los scripts de ejecuciÃ³n (expo start, android, ios).
Lista las dependencias de React Native, Firebase y navegaciÃ³n.
Configura Expo para Android e iOS
                



